{
  "name": "my_installer",
  "description": "Example installer JSON",
  "version": "0.0.1",
  "url": "https://github.com/SamuelMarks/libscript",
  "license": "Apache-2.0 OR MIT OR CC0",
  "scripts_root": "${LIBSCRIPT_ROOT_DIR}",
  "build_root": "${LIBSCRIPT_BUILD_DIR}",
  "dependencies": {
    "required": {
      "databases": [
        {
          "name": "POSTGRES",
          "version": "17",
          "env": "POSTGRES_URL",
          "secrets": {
            "POSTGRES_USER": "rest_user",
            "POSTGRES_PASSWORD": "rest_pass",
            "POSTGRES_DB": "rest_db",
            "POSTGRES_PASSWORD_FILE": null
          },
          "target_env": [
            "DATABASE_URL"
          ]
        },
        {
          "name": "VALKEY",
          "version": "*",
          "env": "REDIS_URL",
          "target_env": [
            "REDIS_URL",
            "VALKEY_URL"
          ]
        }
      ],
      "toolchains": [
        {
          "name": "NODEJS",
          "version": "lts",
          "env": "NODEJS_INSTALL_DIR"
        },
        {
          "name": "PYTHON",
          "version": "3.10",
          "env": "PYTHON_INSTALL_DIR"
        },
        {
          "name": "RUST",
          "version": "nightly",
          "env": "RUST_INSTALL_DIR"
        }
      ],
      "servers": [
        {
          "name": "SADAS",
          "dest": "/tmp/serve-actix-diesel-auth-scaffold",
          "builder": [
            {
              "commands_before": [
                "git_get https://github.com/SamuelMarks/serve-actix-diesel-auth-scaffold \"${SADAS_DEST}\""
              ]
            },
            {
              "command_folder": "_lib/_server/rust"
            }
          ],
          "daemon": {
            "os_native": true,
            "env": [
              "POSTGRES_URL",
              "REDIS_URL"
            ]
          }
        },
        {
          "name": "nodejs-http-server",
          "dest": "/tmp/nodejs-http-server",
          "builder": [
            {
              "commands_before": [
                "git_get https://github.com/mohammadhasanii/Node-HTTP3 \"${NODEJS_HTTP_SERVER_DEST}\""
              ]
            },
            {
              "command_folder": "_lib/_server/nodejs"
            }
          ],
          "daemon": {
            "os_native": true,
            "env": [
              "POSTGRES_URL",
              "REDIS_URL"
            ]
          }
        },
        {
          "name": "python-server",
          "dest": "/tmp/python-server",
          "builder": [
            {
              "commands_before": [
                "git_get https://github.com/digitalocean/sample-python \"${PYTHON_SERVER_DEST}\"",
                "if [ ! -f \"venv-3-12/bin/python\" ]; then",
                "  uv venv --python 3.12 venv-3-12",
                "  venv-3-12/bin/python -m ensurepip",
                "  venv-3-12/bin/python -m pip install -r requirements.txt",
                "fi"
              ]
            },
            {
              "command_folder": "_lib/_server/python"
            }
          ],
          "daemon": {
            "os_native": true,
            "env": [
              "POSTGRES_URL",
              "REDIS_URL"
            ]
          }
        },
        {
          "name": "build-static-files0",
          "dest": "/tmp/ng-material-scaffold",
          "builder": [
            {
              "commands_before": [
                "git_get https://github.com/SamuelMarks/ng-material-scaffold \"${BUILD_STATIC_FILES0_DEST}\" &&",
                "hash=$(git rev-list HEAD -1)",
                "hash_f=dist/ng-material-scaffold/browser/\"${hash}\"",
                "if [ ! -f \"${hash_f}\" ]; then",
                "  npm i -g npm && npm i -g @angular/cli &&",
                "  npm i &&",
                "  ng build --configuration production &&",
                "  touch \"${hash_f}\"",
                "  install -d -D \"${BUILD_STATIC_FILES0_DEST}\"/dist/ng-material-scaffold/browser \"${LIBSCRIPT_BUILD_DIR}\"/ng-material-scaffold",
                "fi"
              ]
            },
            {
              "command_folder": "_lib/_common/_noop"
            }
          ]
        },
        {
          "name": "nginx-config-builder__frontend",
          "builder": [
            {
              "command_folder": "_lib/_server/nginx"
            }
          ],
          "vars": {
            "SERVER_NAME": "example.com",
            "WWWROOT": "\"${LIBSCRIPT_BUILD_DIR}\"/ng-material-scaffold",
            "HTTPS_ALWAYS": 1,
            "HTTPS_VENDOR": "letsencrypt"
          }
        },
        {
          "name": "nginx-config-builder__docs",
          "builder": [
            {
              "command_folder": "_lib/_server/nginx"
            }
          ],
          "vars": {
            "SERVER_NAME": "example.com",
            "LOCATION_EXPR": "~* /(api|redoc|rapidoc|scalar|secured)",
            "HTTPS_ALWAYS": 1,
            "HTTPS_VENDOR": "letsencrypt",
            "PROXY_PASS": "http://localhost:3000"
          }
        },
        {
          "name": "nginx-config-builder__crawl",
          "builder": [
            {
              "command_folder": "_lib/_server/nginx"
            }
          ],
          "vars": {
            "SERVER_NAME": "example.com",
            "LOCATION_EXPR": "/v1/crawl",
            "HTTPS_ALWAYS": 1,
            "HTTPS_VENDOR": "letsencrypt",
            "PROXY_PASS": "http://localhost:3002"
          }
        },
        {
          "name": "nginx-config-builder__swap",
          "builder": [
            {
              "command_folder": "_lib/_server/nginx"
            }
          ],
          "vars": {
            "SERVER_NAME": "example.com",
            "LOCATION_EXPR": "/v1/swap",
            "HTTPS_ALWAYS": 1,
            "HTTPS_VENDOR": "letsencrypt",
            "PROXY_WEBSOCKETS": 1,
            "PROXY_PASS": "http://localhost:3003"
          }
        },
        {
          "name": "nginx-config-builder__data",
          "builder": [
            {
              "command_folder": "_lib/_server/nginx"
            }
          ],
          "vars": {
            "SERVER_NAME": "example.com",
            "LOCATION_EXPR": "/data",
            "HTTPS_ALWAYS": 1,
            "HTTPS_VENDOR": "letsencrypt",
            "WWWROOT": "/opt/repos/E4S2024",
            "PROXY_PASS": "http://localhost:3003"
          }
        }
      ]
    },
    "optional": {
      "databases": [
        {
          "name": "RABBITMQ",
          "version": "*",
          "env": "AMQP_URL"
        }
      ],
      "servers": [
        {
          "name": "JupyterHub",
          "daemon": {
            "os_native": true
          }
        }
      ]
    }
  },
  "log_server": {
    "optional": true
  }
}